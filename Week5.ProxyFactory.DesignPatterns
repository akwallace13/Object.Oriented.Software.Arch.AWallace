#Proxy Pattern

class SaleProxy(object):
    """Counting proxy class for Sales"""
    
    #Count of Sales
    count = 0
    
    def __new__(cls, *args):
        """Overloaded __new__"""
        #keep track of counts
        instance = object.__new__(cls)
        cls.incr_count()
        return instance
    
    def __init__(self, sale):
        self.sale = sale
        
        @classmethod
        def incr_count(cls):
            """Increase sale count"""
            cls.count += 1
            
        @classmethod
        def decr_count(cls):
            """Decrease sale count"""
            cls.count -= 1
            
        @classmethod
        def get_count(cls):
            """get sale count"""
            return cls.count
        
        def __str__(self):
            return str(self.sale)
        
        def __getattr__(self, item):
            """redirect to items attributes"""
            return getattr(self.sale, item)
        
        def __del__(self):
            """overload __del__ method"""
            #decrease sale count
            self.decr_count()
            

#Factory Pattern
from abc import ABCMeta, abstractmethod

class Sale(metaclass=ABCMeta):
    """Sale Class"""
    
    def __init__(self, item, price, quantity):
        self.item = item
        self.price = price
        self.quantity = quantity
        
    @abstractmethod
    def get_role(self):
        pass
    
    def __str__(self):
        return "{} {} were sold for ${}".format(self.__class__.__name__, self.quantity, self.item, self.price)


class Journal(Sale):
    """A Journal Sale"""

    def get_role(self):
        return "Journals"
    
class Pen(Sale):
    """A Pen Sale"""
    
    def get_role(self):
        return "Pens"
    
class Book(Sale):
    """A Book Sale"""
    
    def get_role(self):
        return "Books"
    
class Transaction(object):
    """A Transaction Factory Class"""
    
    @classmethod
    def create(cls, name, *args):
        
        item = item.lower().strip()
        
        if name == 'Journal':
            return Journal(*args)
        elif name == 'Pen':
            return Pen(*args)
        elif name == 'Book':
            return Book(*args)
        
        

#Singleton Pattern
#use for tax & total (how?)
class Singleton:
    
    __instance = None
    
    def __new__(cls):
        if (cls.__instance is None):
            cls.__instance = \
                super (Singleton, cls).__new__(cls)
            
        return cls.__instance
     
s1 = Singleton()
print(s1)
s2 = Singleton()
print(s2)